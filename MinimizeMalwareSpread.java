// Time Complexity : O(V*V)
// Space Complexity : O(V)

import java.util.Arrays;

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int col = 0;
        for (int i = 0; i < n; i++) {
            if (colors[i] == -1) {
                dfs(graph, colors, i, col);
                col++;
            }
        }

        int[] groups = new int[col];
        for (int node : colors)
            groups[node]++;

        int[] initGroups = new int[n];
        for (int node : initial)
            initGroups[colors[node]]++;

        int result = Integer.MAX_VALUE;

        for (int node : initial) {
            if (initGroups[colors[node]] == 1) {
                if (result == Integer.MAX_VALUE)
                    result = node;
                else if (groups[colors[node]] == groups[colors[result]] && node < result)
                    result = node;
                else if (groups[colors[node]] > groups[colors[result]])
                    result = node;
            }
        }

        if (result == Integer.MAX_VALUE)
            for (int node : initial)
                result = Math.min(result, node);
        return result;
    }

    private void dfs(int[][] graph, int[] colors, int i, int col) {
        // base
        if (colors[i] != -1)
            return;
        // logic
        colors[i] = col;
        for (int j = 0; j < graph.length; j++) {
            if (graph[i][j] == 1)
                dfs(graph, colors, j, col);
        }
    }
}